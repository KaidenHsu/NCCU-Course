summary(iris.pac)
summary(iris.pca)
iris.pca
(is.pca <- prcomp(log(iris[, 1:4]), center = TRUE, scale. = TRUE))
(1.7125)^2/(0.9524)^2
0.7331/0.2268
install.packages("fpc")
library(updateR)
library(devtools)
install.packages('devtools')
library(devtools)
5/293
4/64=
C
4/64
library(shiny)
library("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
2452+36+18675+280
12509+21443
12509+21443-50000
297*30
12509+21443+16000
range(1..10)
range(1:10)
range(1:10)[2]
0.786
0.760
0.743
0.712
0.676
0.662
0.648
0.637
0.593
0.599
0.568
a <- c(0.786
0.760
0.743
0.712
0.676
0.662
0.648
0.637
0.593
0.599
0.568)
MS2CNN_2 <- c(0.786,0.760,0.743,0.712,0.676,0.662,0.648,0.637,0.593,0.599,0.568)
MS2CNN_mix_2 <- c(0.779,0.740,0.716,0.700,0.671,0.662,0.643,0.646,0.605,0.573, 0.597)
MS2CNN_2_COS <- c(0.786,0.760,0.743,0.712,0.676,0.662,0.648,0.637,0.593,0.599,0.568)
MS2CNN_mix_2_COS <- c(0.779,0.740,0.716,0.700,0.671,0.662,0.643,0.646,0.605,0.573, 0.597)
MS2PIP_2_COS <- c(0.729,0.707,0.690,0.671,0.638,0.633,0.623,0.620,0.576,0.578,0.573)
wilcox.test(MS2CNN_2_COS, MS2PIP_2_COS, paired=TRUE)
MS2CNN_2_COS <- c(0.786,0.760,0.743,0.712,0.676,0.662,0.648,0.637,0.593,0.599,0.568)
MS2CNN_mix_2_COS <- c(0.779,0.740,0.716,0.700,0.671,0.662,0.643,0.646,0.605,0.573, 0.597)
MS2PIP_2_COS <- c(0.729,0.707,0.690,0.671,0.638,0.633,0.623,0.620,0.576,0.578,0.573)
pDeep_2_COS <- c(0.771, 0.749, 0.740, 0.723, 0.701, 0.697, 0.697, 0.710, 0.665, 0.678, 0.662)
wilcox.test(MS2CNN_2_COS, MS2PIP_2_COS, paired=TRUE)
wilcox.test(MS2CNN_mix_2_COS, MS2PIP_2_COS, paired=TRUE)
wilcox.test(MS2CNN_2_COS, pDeep_2_COS, paired=TRUE)
wilcox.test(MS2CNN_mix_2_COS, pDeep_2_COS, paired=TRUE)
MS2CNN_3_COS <- c(0.661, 0.742, 0.735, 0.689, 0.686, 0.643, 0.624, 0.644, 0.646, 0.593, 0.621)
MS2CNN_mix_3_COS <- c(0.645, 0.764, 0.738, 0.724, 0.710, 0.672, 0.643, 0.651, 0.655, 0.605, 0.598)
MS2PIP_3_COS <- c(0.603, 0.695, 0.680, 0.639, 0.620, 0.592, 0.567, 0.573, 0.582, 0.558, 0.561)
pDeep_3_COS <- c(0.493, 0.697, 0.678, 0.640, 0.601, 0.588, 0.567, 0.564, 0.569, 0.538, 0.549)
wilcox.test(MS2CNN_3_COS, MS2PIP_3_COS, paired=TRUE)
wilcox.test(MS2CNN_mix_3_COS, MS2PIP_3_COS, paired=TRUE)
wilcox.test(MS2CNN_3_COS, pDeep_3_COS, paired=TRUE)
wilcox.test(MS2CNN_mix_3_COS, pDeep_3_COS, paired=TRUE)
MS2CNN_2_PCC <- c(0.736, 0.709, 0.690, 0.654, 0.613, 0.603, 0.589, 0.578, 0.533, 0.548, 0.512)
MS2CNN_mix_2_PCC <- c(0.730, 0.685, 0.657, 0.642, 0.615, 0.609, 0.588, 0.593, 0.555, 0.516, 0.550)
MS2PIP_2_PCC <- c(0.672, 0.648, 0.631, 0.612, 0.578, 0.579, 0.569, 0.569, 0.525, 0.529, 0.525)
pDeep_2_PCC <- c(0.724, 0.701, 0.692, 0.677, 0.655, 0.654, 0.655, 0.672, 0.625, 0.643, 0.625)
wilcox.test(MS2CNN_2_PCC, MS2PIP_2_PCC, paired=TRUE)
wilcox.test(MS2CNN_mix_2_PCC, MS2PIP_2_PCC, paired=TRUE)
wilcox.test(MS2CNN_2_PCC, pDeep_2_PCC, paired=TRUE)
wilcox.test(MS2CNN_mix_2_PCC, pDeep_2_PCC, paired=TRUE)
MS2CNN_3_PCC <- c(0.593, 0.677, 0.670, 0.617, 0.621, 0.572, 0.554, 0.577, 0.586, 0.527, 0.560)
MS2CNN_mix_3_PCC <- c(0.580, 0.705, 0.674, 0.662, 0.652, 0.614, 0.580, 0.587, 0.599, 0.541, 0.540)
MS2PIP_3_PCC <- c(0.531, 0.624, 0.609, 0.563, 0.545, 0.517, 0.491, 0.499, 0.515, 0.493, 0.499)
pDeep_3_PCC <- c(0.403, 0.634, 0.613, 0.571, 0.530, 0.519, 0.498, 0.496, 0.503, 0.473, 0.488)
wilcox.test(MS2CNN_3_PCC, MS2PIP_3_PCC, paired=TRUE)
wilcox.test(MS2CNN_mix_3_PCC, MS2PIP_3_PCC, paired=TRUE)
wilcox.test(MS2CNN_3_PCC, pDeep_3_PCC, paired=TRUE)
wilcox.test(MS2CNN_mix_3_PCC, pDeep_3_PCC, paired=TRUE)
MS2CNN_2_COS-MS2PIP_2_COS
MS2CNN_3_COS     <- c(0.661, 0.742, 0.735, 0.689, 0.686, 0.643, 0.624, 0.644, 0.646, 0.593, 0.621)
MS2CNN_3_COS
log2(10)
10^0.019
2^0.063
10^-0.07
2^-2.49
10^-0.75
10^2.099
2^6.974
log10(0.02/0.085)
10xlog10(0.02/0.085)
10*log10(0.02/0.085)
10*log10(0.01/0.033)
10*log10(0.01/0.033)
10*log10(0.18/0.081)
10*log10(0.09/0.041)
BiocManager::install("GenomicInteractions")
install.packages("BiocManager")
BiocManager::install("GenomicInteractions")
install.packages("mvtnorm")
install.packages("mvtnorm")
BiocManager::install("GenomicInteractions")
library("GenomicInteractions")
data(hic_example_data)
library(GenomicRanges)
pos <- GRanges(seqnames="chr15", ranges=IRanges(start=59477709, end=59482708))
region <- GRanges(seqnames="chr15", ranges=IRanges(start=58980209, end=59980208))
vp <- viewPoint(hic_example_data, pos, region)
plotAvgViewpoint(vp, left_dist = 1000000, right_dist = 100000)
export.bedpe(vp)
export.bed12(vp)
region <- GRanges(seqnames="chr15", ranges=IRanges(start=59467709, end=59492708))
vp <- viewPoint(hic_example_data, pos, region)
plotAvgViewpoint(vp, left_dist = 1000000, right_dist = 100000)
plotAvgViewpoint(vp)
plotViewpoint(vp)
export.bed12(vp)
head(vp)
pos <- GRanges(seqnames="chr15", ranges=IRanges(start=59477709, end=59482708))
region <- GRanges(seqnames="chr15", ranges=IRanges(start=58980209, end=59980208))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
region <- GRanges(seqnames="chr15", ranges=IRanges(start=559476709, end=59483708))
region <- GRanges(seqnames="chr15", ranges=IRanges(start=559476709, end=59493708))
region <- GRanges(seqnames="chr15", ranges=IRanges(start=59476709, end=59483708))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
export.bed12(vp)
region <- GRanges(seqnames="chr15", ranges=IRanges(start=59466709, end=59493708))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
region <- GRanges(seqnames="chr15", ranges=IRanges(start=59366709, end=59593708))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
region <- GRanges(seqnames="chr15", ranges=IRanges(start=58366709, end=60593708))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
pos <- GRanges(seqnames="chr15", ranges=IRanges(start=59099999, end=59199999))
region <- GRanges(seqnames="chr15", ranges=IRanges(start=58366709, end=60593708))
vp <- viewPoint(hic_example_data, pos, region)
export.bedpe(vp)
version("GenomicInteractions")
help(viewPoint)
?qchisq
pchisq(1, df =  3)
qchisq(0.6, df =  3)
qchisq(0.4, df =  3)
qchisq(0.55, df =  3)
qchisq(0.45, df =  3)
x <- c(1,2,3)
qchisq(0.55, (2*x))
exactPoiCI <- function (X, conf.level=0.95) {
alpha = 1 - conf.level
upper <- 0.5 * qchisq((1-(alpha/2)), (2*X))
lower <- 0.5 * qchisq(alpha/2, (2*X +2))
return(c(lower, upper))
}
exactPoiCI(42, 0.9)
exactPoiCI(42)
exactPoiCI(42, 0.99)
exactPoiCI(100, 0.9)
library(ggplot2)
a <- 1:500
b <- rnorm(500, 50, 50)
df <- data.frame(a, b)
ggplot(df, aes(x=a, y=b))
df
ggplot(df, aes(x=a, y=b)) + geom_smooth(method="loess")
exit
exit()
quit()
data=c(288-1,17,1,13882-17),nrow=2,ncol=2)
t <- as.table(matrix(data=c(288-1,17,1,13882-17),nrow=2,ncol=2))
t
pbinom(ceiling((0.045-0.04)* 8426))
?pbinom
pbinom(ceiling(0.041* 8426),8426,0.045)
binSearchNonPositive <- function(fEventuallyNegative) { 	# Note: 3
low <- 1
high <- low+1
while(fEventuallyNegative(high)>0) {
high <- 2*high
}
while(high>low+1) {
m <- low + (high-low) %/% 2
if(fEventuallyNegative(m)>0) {
low <- m
} else {
high <- m
}
}
high
}
actualSize <- function(targetRate,difference,errorProb) {
binSearchNonPositive(function(n) {
errorProb(targetRate,difference,n) - errorProb })
}
size <- actualSize(0.045,0.004,0.05)
print(size)
errorProb <- function(targetRate,difference,size) {
pbinom(ceiling((targetRate-difference)*size),
size=size,prob=targetRate)
}
size <- actualSize(0.045,0.004,0.05)
print(size)
library(pwr)
install.packages("pwr")
library(pwr)
pwr.p.test(h=ES.h(p1=0.045, p2= 0.04), sig.level = 0.05, power = 0.8)
pwr.p.test(h=ES.h(p1=0.045, p2= 0.04), sig.level = 0.05, power = 0.8, alternative = "greater")
pwr.p.test(h=ES.h(p1=0.045, p2= 0.04), sig.level = 0.05, power = 0.9, alternative = "greater")
pwr.p.test(h=ES.h(p1=0.045, p2= 0.04), sig.level = 0.05, alternative = "greater")
pwr.p.test(h=ES.h(p1=0.045, p2= 0.04), sig.level = 0.05, power = 0.7, alternative = "greater")
set.seed(235236)
d <- data.frame(EarnedIncome=100000*rlnorm(100),  CapitalGains=100000*rlnorm(100))
print(with(d,cor(EarnedIncome,CapitalGains)))
with(d,cor(EarnedIncome,CapitalGains,method='spearman'))
with(d,cor.test(EarnedIncome,CapitalGains,method='spearman'))
exit
quit()
3!
factorial(3)
factorial(11)
factorial(11)/(2^5*factorial(5))
factorial(10)/(2^4*factorial(4))
factorial(10)/((2^4)*factorial(4))
factorial(11)/((2^5)*factorial(5))
factorial(10)/((2^4)*factorial(4))
factorial(9)/((2^3)*factorial(3))
factorial(11)/(2^5*factorial(5))
factorial(9)/(2^4*factorial(4))
factorial(7)/(2^3*factorial(3))
factorial(13)/(2^6*factorial(6))
factorial(14)/(2^7*factorial(7))
factorial(15)/(2^7*factorial(7))
d <- read.csv("~/Downloads/1082_dataScience.csv",header = T)
head(d)
d[,7]
subset(d,V7!="-")
subset(d,d$V7!="-")
d$V7
d$midterm..實得分數.
subset(d,d$midterm..實得分數.!="-")
d.subset <- subset(d,d$midterm..實得分數.!="-")
head(d[,7])
head(d.subset[,7])
as.integer(d.subset[,7])
midterm <- as.integer(d.subset[,7])
summary(midterm)
subset()
d.subset
as.numeric(d.subset$midterm..實得分數.)
midterm <- as.numeric(d.subset$midterm..實得分數.)
midterm
d <- read.csv("~/Downloads/1082_dataScience.csv",header = T, as.is = F)
head(d)
class(d)
class(d$midterm..實得分數.)
d <- read.csv("~/Downloads/1082_dataScience.csv",header = T, as.is = T)
class(d$midterm..實得分數.)
d.subset <- subset(d,d$midterm..實得分數.!="-")
head(d.subset)
midterm <- as.numeric(d.subset$midterm..實得分數.)
midterm
summary(midterm)
d.subset <- subset(d,d$midterm..實得分數.!="-" & d$midterm..實得分數.!="0.00")
d.subset
midterm <- as.numeric(d.subset$midterm..實得分數.)
summary(midterm)
hist(midterm)
hist(midterm,breaks = seq(2,13,1))
?rowSums
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x)
?hist
?pairs
?hist
?par
?par
?rect
?hist
?pairs
?on.exit
?hist
?q
install.packages("Cairo")
library("Cairo")
install.packages("Cairo")
library("Cairo")
library("Cairo")
setEPS()
?pdf
x <- c(1,2,3)
x
sample(1:length(x),2)
sample(1:length(x),2)
x_i <- sample(1:length(x),2)
x[x_i]
x_i
18190*18189/2
setwd("~/Dropbox/13_NCCU/courses/DataScience_資料科學實務/codes/code09.sup1.mem/KDD2009")
d <- read.table('orange_small_train.data.gz',  	# Note: 1
header=T,
sep='\t',
na.strings=c('NA','')) 	# Note: 2
churn <- read.table('orange_small_train_churn.labels.txt',
header=F,sep='\t') 	# Note: 3
d$churn <- churn$V1 	# Note: 4
appetency <- read.table('orange_small_train_appetency.labels.txt',
header=F,sep='\t')
d$appetency <- appetency$V1 	# Note: 5
upselling <- read.table('orange_small_train_upselling.labels.txt',
header=F,sep='\t')
d$upselling <- upselling$V1 	# Note: 6
set.seed(729375) 	# Note: 7
d$rgroup <- runif(dim(d)[[1]])
dTrainAll <- subset(d,rgroup<=0.9)
dTest <- subset(d,rgroup>0.9) 	# Note: 8
outcomes=c('churn','appetency','upselling')
vars <- setdiff(colnames(dTrainAll),
c(outcomes,'rgroup'))
catVars <- vars[sapply(dTrainAll[,vars],class) %in%
c('factor','character')] 	# Note: 9
numericVars <- vars[sapply(dTrainAll[,vars],class) %in%
c('numeric','integer')] 	# Note: 10
rm(list=c('d','churn','appetency','upselling')) 	# Note: 11
outcome <- 'churn' 	# Note: 12
pos <- '1' 	# Note: 13
useForCal <- rbinom(n=dim(dTrainAll)[[1]],size=1,prob=0.1)>0 	# Note: 14
dCal <- subset(dTrainAll,useForCal)
dTrain <- subset(dTrainAll,!useForCal)
table218 <- table(
Var218=dTrain[,'Var218'], 	# Note: 1
churn=dTrain[,outcome], 	# Note: 2
useNA='ifany') 	# Note: 3
print(table218)
print(table218[,2]/(table218[,1]+table218[,2]))
v<-"Var200"
outCol<-dTrain[,outcome]
varCol<-dTrain[,v]
appCol<-dTest[,v]
head(varCol)
pPos <- sum(outCol==pos)/length(outCol)
pPos
naTab <- table(as.factor(outCol[is.na(varCol)]))
naTab
varCol
mkPredC <- function(outCol,varCol,appCol) { 	# Note: 1
pPos <- sum(outCol==pos)/length(outCol) 	# Note: 2
naTab <- table(as.factor(outCol[is.na(varCol)]))
pPosWna <- (naTab/sum(naTab))[pos] 	# Note: 3
vTab <- table(as.factor(outCol),varCol)
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3) 	# Note: 4
pred <- pPosWv[appCol] 	# Note: 5
pred[is.na(appCol)] <- pPosWna 	# Note: 6
pred[is.na(pred)] <- pPos 	# Note: 7
pred 	# Note: 8
}
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
for(v in numericVars) {
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dTrain[,pi],dTrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
}
library('ROCR')
calcAUC <- function(predcol,outcol) {
perf <- performance(prediction(predcol,outcol==pos),'auc')
as.numeric(perf@y.values)
}
for(v in numericVars) {
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dTrain[,pi],dTrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
}
library('ROCR')
install.packages("ROCR")
library('ROCR')
library('ggplot2')
ggplot(data=dCal) +
geom_density(aes(x=predVar126,color=as.factor(churn)))
for(v in numericVars) {
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dTrain[,pi],dTrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
}
library('ggplot2')
ggplot(data=dCal) +
geom_density(aes(x=predVar126,color=as.factor(churn)))
ggplot(data=dCal) +
geom_density(aes(x=predVar81,color=as.factor(churn)))
logLikelyhood <- function(outCol,predCol) { 	# Note: 1
sum(ifelse(outCol==pos,log(predCol),log(1-predCol)))
}
selVars <- c()
minStep <- 5
baseRateCheck <- logLikelyhood(dCal[,outcome],
sum(dCal[,outcome]==pos)/length(dCal[,outcome]))
for(v in catVars) {  	# Note: 2
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck))
if(liCheck>minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
calcAUC <- function(predcol,outcol) {
perf <- performance(prediction(predcol,outcol==pos),'auc')
as.numeric(perf@y.values)
}
for(v in catVars) {
pi <- paste('pred',v,sep='')
aucTrain <- calcAUC(dTrain[,pi],dTrain[,outcome])
if(aucTrain>=0.8) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
}
for(v in catVars) {
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredC(dTrain[,outcome],dTrain[,v],dTrain[,v])
dCal[,pi] <- mkPredC(dTrain[,outcome],dTrain[,v],dCal[,v])
dTest[,pi] <- mkPredC(dTrain[,outcome],dTrain[,v],dTest[,v])
}
for(v in catVars) {  	# Note: 2
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck))
if(liCheck>minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numericVars) { 	# Note: 3
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck))
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
library('class')
nK <- 200
knnTrain <- dTrain[,selVars]  	# Note: 1
knnCl <- dTrain[,outcome]==pos 	# Note: 2
knnPred <- function(df) { 	# Note: 3
knnDecision <- knn(knnTrain,df,knnCl,k=nK,prob=T)
ifelse(knnDecision==TRUE, 	# Note: 4
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
}
print(calcAUC(knnPred(dTrain[,selVars]),dTrain[,outcome]))
print(calcAUC(knnPred(dCal[,selVars]),dCal[,outcome]))
print(calcAUC(knnPred(dTest[,selVars]),dTest[,outcome]))
dCal$kpred <- knnPred(dCal[,selVars])
ggplot(data=dCal) +
geom_density(aes(x=kpred,
color=as.factor(churn),linetype=as.factor(churn)))
selVars
plotROC <- function(predcol,outcol) {
perf <- performance(prediction(predcol,outcol==pos),'tpr','fpr')
pf <- data.frame(
FalsePositiveRate=perf@x.values[[1]],
TruePositiveRate=perf@y.values[[1]])
ggplot() +
geom_line(data=pf,aes(x=FalsePositiveRate,y=TruePositiveRate)) +
geom_line(aes(x=c(0,1),y=c(0,1)))
}
print(plotROC(knnPred(dTest[,selVars]),dTest[,outcome]))
