panel = make.color.panel(colors, ncols)
nlegend = 100
legend.values = seq(min.value, max.value, (max.value - min.value) / (nlegend-1))
legend.cols = vals.to.cols(legend.values, breaks, ncols)
par(mai=c(0.1, 0.1, 0.1, 0.1))
plot.new()
fin = par("fin")
if (rotate) {
plot.width = fin[2]
plot.height = fin[1]
} else {
plot.width = fin[1]
plot.height = fin[2]
}
plot.width = 0.5
plot.height = 1.5
xlim=c(0,1)
offset.x = ((plot.width - width)/2) / plot.width
if (offset.x < 0)
stop("legend too wide")
left = offset.x
right = 1 - offset.x
ylim = c(min.value, max.value)
delta.y = ylim[2]-ylim[1]
ratio = delta.y / height
offset.y = ratio * (((plot.height - height)/2))
if (offset.y < 0)
stop("legend too high")
ylim[1] = ylim[1] - offset.y
ylim[2] = ylim[2] + offset.y
if (rotate)
plot.window(xlim=ylim, ylim=xlim)
else
plot.window(xlim=xlim, ylim=ylim)
offset.y
plot.height
height
plot.width = 2.5
plot.height = 2
xlim=c(0,1)
offset.x = ((plot.width - width)/2) / plot.width
if (offset.x < 0)
stop("legend too wide")
left = offset.x
right = 1 - offset.x
ylim = c(min.value, max.value)
delta.y = ylim[2]-ylim[1]
ratio = delta.y / height
offset.y = ratio * (((plot.height - height)/2))
if (offset.y < 0)
stop("legend too high")
ylim[1] = ylim[1] - offset.y
ylim[2] = ylim[2] + offset.y
if (rotate)
plot.window(xlim=ylim, ylim=xlim)
else
plot.window(xlim=xlim, ylim=ylim)
rect.col = panel[legend.cols]
if (rotate){
plot.window(xlim=ylim, ylim=xlim)
} else {
plot.window(xlim=xlim, ylim=ylim)
}
if (rotate){
plot.window(xlim=ylim, ylim=xlim)
} else {
plot.window(xlim=xlim, ylim=ylim)
}
rect.col = panel[legend.cols]
y = legend.values
y.bottom = y[1:(length(y)-1)]
y.top = y[2:length(y)]
if (rotate)
rect(y.bottom, left, y.top, right, col=rect.col, border=NA)
else
rect(left, y.bottom, right, y.top, col=rect.col, border=NA)
if (equal.spaced)
axis.values = seq(min.value, max.value,length.out=4)
else
axis.values = breaks
tick.size = 0.07 / plot.width
if (rotate) {
segments(axis.values, right, axis.values, right+tick.size)
text(axis.values, right+tick.size, axis.values, pos=3, cex=0.75)
} else {
segments(right, axis.values, right+tick.size, axis.values)
text(right+tick.size, axis.values, axis.values, pos=4, cex=0.75)
}
rotate=T
if (is.null(breaks))
breaks = seq(min(na.omit(values)), max(na.omit(values)), length.out=length(colors))
min.value = breaks[1]
max.value = breaks[length(breaks)]
if (length(breaks) != length(colors))
stop("#breaks and #colors must be equal")
# make color panel
panel = make.color.panel(colors, ncols)
nlegend = 100
legend.values = seq(min.value, max.value, (max.value - min.value) / (nlegend-1))
legend.cols = vals.to.cols(legend.values, breaks, ncols)
par(mai=c(0.1, 0.1, 0.1, 0.1))
plot.new()
fin = par("fin")
if (rotate) {
plot.width = fin[2]
plot.height = fin[1]
} else {
plot.width = fin[1]
plot.height = fin[2]
}
# for increasing size of color legend
plot.width = 2.5
plot.height = 2
# x axis
xlim=c(0,1)
offset.x = ((plot.width - width)/2) / plot.width
if (offset.x < 0)
stop("legend too wide")
left = offset.x
right = 1 - offset.x
# y axis
ylim = c(min.value, max.value)
delta.y = ylim[2]-ylim[1]
ratio = delta.y / height
offset.y = ratio * (((plot.height - height)/2))
if (offset.y < 0)
stop("legend too high")
ylim[1] = ylim[1] - offset.y
ylim[2] = ylim[2] + offset.y
if (rotate){
plot.window(xlim=ylim, ylim=xlim)
} else {
plot.window(xlim=xlim, ylim=ylim)
}
rect.col = panel[legend.cols]
y = legend.values
y.bottom = y[1:(length(y)-1)]
y.top = y[2:length(y)]
if (rotate){
rect(y.bottom, left, y.top, right, col=rect.col, border=NA)
} else {
rect(left, y.bottom, right, y.top, col=rect.col, border=NA)
}
if (equal.spaced){
axis.values = seq(min.value, max.value,length.out=4)
} else{
axis.values = breaks
}
tick.size = 0.07 / plot.width
if (rotate) {
segments(axis.values, right, axis.values, right+tick.size)
text(axis.values, right+tick.size, axis.values, pos=3, cex=0.75)
} else {
segments(right, axis.values, right+tick.size, axis.values)
text(right+tick.size, axis.values, axis.values, pos=4, cex=0.75)
}
colors = c("white", colors()[128], "darkred", "orange", "white", "darkblue")
breaks = c(0, 2, 7, 11, 14, 16)
if (is.null(breaks))
breaks = seq(min(na.omit(values)), max(na.omit(values)), length.out=length(colors))
min.value = breaks[1]
max.value = breaks[length(breaks)]
if (length(breaks) != length(colors))
stop("#breaks and #colors must be equal")
# make color panel
panel = make.color.panel(colors, ncols)
nlegend = 100
legend.values = seq(min.value, max.value, (max.value - min.value) / (nlegend-1))
legend.cols = vals.to.cols(legend.values, breaks, ncols)
par(mai=c(0.1, 0.1, 0.1, 0.1))
plot.new()
fin = par("fin")
if (rotate) {
plot.width = fin[2]
plot.height = fin[1]
} else {
plot.width = fin[1]
plot.height = fin[2]
}
# for increasing size of color legend
plot.width = 2.5
plot.height = 2
# x axis
xlim=c(0,1)
offset.x = ((plot.width - width)/2) / plot.width
if (offset.x < 0)
stop("legend too wide")
left = offset.x
right = 1 - offset.x
# y axis
ylim = c(min.value, max.value)
delta.y = ylim[2]-ylim[1]
ratio = delta.y / height
offset.y = ratio * (((plot.height - height)/2))
if (offset.y < 0)
stop("legend too high")
ylim[1] = ylim[1] - offset.y
ylim[2] = ylim[2] + offset.y
if (rotate){
plot.window(xlim=ylim, ylim=xlim)
} else {
plot.window(xlim=xlim, ylim=ylim)
}
rect.col = panel[legend.cols]
y = legend.values
y.bottom = y[1:(length(y)-1)]
y.top = y[2:length(y)]
if (rotate){
rect(y.bottom, left, y.top, right, col=rect.col, border=NA)
} else {
rect(left, y.bottom, right, y.top, col=rect.col, border=NA)
}
if (equal.spaced){
axis.values = seq(min.value, max.value,length.out=4)
} else{
axis.values = breaks
}
tick.size = 0.07 / plot.width
if (rotate) {
segments(axis.values, right, axis.values, right+tick.size)
text(axis.values, right+tick.size, axis.values, pos=3, cex=0.75)
} else {
segments(right, axis.values, right+tick.size, axis.values)
text(right+tick.size, axis.values, axis.values, pos=4, cex=0.75)
}
library("gplots")
# make.color.panel(c("red", "green", "yellow"))
make.color.panel=function(colors, ncols=256)
{
panel = NULL
for (i in 2:length(colors))
panel = c(panel, colorpanel(ncols, colors[i-1], colors[i]))
panel
}
# for example vals.to.cols(1:10, c(1, 3, 10), ncols=10) returns:
# [1] 1  6 11 12 14 15 16 17 19 20
vals.to.cols=function(vals, breaks, ncols=256)
{
min = breaks[1]
max = breaks[length(breaks)]
n = length(breaks)-1
cols = rep(-1, length(vals))
for (i in 1:n)
{
ind = (breaks[i] <= vals) & (vals <= breaks[i+1])
if (!any(ind))
next
# normalize to [0,1]
cols[ind] = (vals[ind] - breaks[i]) / (breaks[i+1] - breaks[i])
# normalize to [i*ncols,i*(ncols+1)]
cols[ind] = (i-1)*ncols + cols[ind]*(ncols-1) + 1
# round
cols[ind] = round(cols[ind])
}
return (cols)
}
values=1000*1:10
ncols=256
equal.spaced=F
colors = c("white", colors()[128], "darkred", "orange", "white", "darkblue")
breaks = c(0, 2, 7, 11, 14, 16)
width=0.1
height=2
rotate=T
if (is.null(breaks))
breaks = seq(min(na.omit(values)), max(na.omit(values)), length.out=length(colors))
min.value = breaks[1]
max.value = breaks[length(breaks)]
if (length(breaks) != length(colors))
stop("#breaks and #colors must be equal")
# make color panel
panel = make.color.panel(colors, ncols)
nlegend = 100
legend.values = seq(min.value, max.value, (max.value - min.value) / (nlegend-1))
legend.cols = vals.to.cols(legend.values, breaks, ncols)
par(mai=c(0.1, 0.1, 0.1, 0.1))
plot.new()
fin = par("fin")
if (rotate) {
plot.width = fin[2]
plot.height = fin[1]
} else {
plot.width = fin[1]
plot.height = fin[2]
}
# for increasing size of color legend
plot.width = 2.5
plot.height = 2
# x axis
xlim=c(0,1)
offset.x = ((plot.width - width)/2) / plot.width
if (offset.x < 0)
stop("legend too wide")
left = offset.x
right = 1 - offset.x
# y axis
ylim = c(min.value, max.value)
delta.y = ylim[2]-ylim[1]
ratio = delta.y / height
offset.y = ratio * (((plot.height - height)/2))
if (offset.y < 0)
stop("legend too high")
ylim[1] = ylim[1] - offset.y
ylim[2] = ylim[2] + offset.y
if (rotate){
plot.window(xlim=ylim, ylim=xlim)
} else {
plot.window(xlim=xlim, ylim=ylim)
}
rect.col = panel[legend.cols]
y = legend.values
y.bottom = y[1:(length(y)-1)]
y.top = y[2:length(y)]
if (rotate){
rect(y.bottom, left, y.top, right, col=rect.col, border=NA)
} else {
rect(left, y.bottom, right, y.top, col=rect.col, border=NA)
}
if (equal.spaced){
axis.values = seq(min.value, max.value,length.out=4)
} else{
axis.values = breaks
}
tick.size = 0.07 / plot.width
if (rotate) {
segments(axis.values, right, axis.values, right+tick.size)
text(axis.values, right+tick.size, axis.values, pos=3, cex=0.75)
} else {
segments(right, axis.values, right+tick.size, axis.values)
text(right+tick.size, axis.values, axis.values, pos=4, cex=0.75)
}
?merge
540*0.85
45
45*4
45
45*5
11.8+1.55+6.68
11.8+1.55+6.68+1.5
1180+155+688+180
1180+155+688+170
40＊*13
40*13
40*13*29
17432/1500
2,051.48/1.01=
2051.48/1.01=
;
2051.48/1.01
2051.48/1.001
180*150
log(1.6,10)
log(1.6,10)x20
log(1.6,10)x10
log(1.6,10)*10
log(0.1,10)*10
2000*0.005
28,080*5
28080*5
30240*5
32400*5
(-3/4) ln (1 –4/30.05)
(-3/4)ln(1 –4/30.05)
(-3/4)
ln(3)
1949/248
1299/144
4/5
-ln(0.0333)
42*110
6.9/6
1/(1+e^0.1)
sigmoid(2)
sigmoid = function(x) {
1 / (1 + exp(-x))
}
sigmoid(2)
sigmoid(0.1)
sigmoid(0.2)
?boxplot
(90+89+85)/3
source("https://bioconductor.org/biocLite.R")
install.packages("installr")
install.packages("installr")
updateR()
install.packages("installr")
updateR()
source("https://bioconductor.org/biocLite.R")
biocLite("seqplots")
library(seqplots)
run()
biocLite("BSgenome.Dmelanogaster.UCSC.dm3")
run()
run()
run()
library(seqplots)
run()
getPlotSetArray()
a<-getPlotSetArray(tracks = "~/SeqPlots_data/files/RAS3_1-scalingFactor.bw",features = "~/SeqPlots_data/files/ctcf_enr.bed",refgenome = "dm3",xmin = 1000, xmax = 1000,type = "mf")
plot(a)
a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap
plot(colMeans(a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap))
image(t(a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap))
?image
image(t(a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap), col=colorRampPalette(c("white","tomato")))
image(t(a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap), col=colorRampPalette(c("white","tomato"))(100))
image(a$data$ctcf_enr$`RAS3_1-scalingFactor`$heatmap, col=colorRampPalette(c("white","tomato"))(100))
source("~/Downloads/seqplots_heatmap.R")
my_seqplots_heatmap("~/SeqPlots_data/files/RAS3_1-scalingFactor.bw","~/SeqPlots_data/files/ctcf_enr.bed")
source("~/Downloads/seqplots_heatmap.R")
source("~/Downloads/seqplots_heatmap.R")
my_seqplots_heatmap("~/SeqPlots_data/files/RAS3_1-scalingFactor.bw","~/SeqPlots_data/files/ctcf_enr.bed")
source("~/Downloads/seqplots_heatmap.R")
my_seqplots_heatmap("~/SeqPlots_data/files/RAS3_1-scalingFactor.bw","~/SeqPlots_data/files/ctcf_enr.bed")
my_seqplots_heatmap(rep("~/SeqPlots_data/files/RAS3_1-scalingFactor.bw",3),"~/SeqPlots_data/files/ctcf_enr.bed")
a<-getPlotSetArray(tracks = "~/SeqPlots_data/files/RAS3_1-scalingFactor.bw",features = "~/SeqPlots_data/files/ctcf_enr.bed",refgenome = "dm3",xmin = 1000, xmax = 1000,type = "mf")
plot(a)
a<-getPlotSetArray(tracks = "~/SeqPlots_data/files/RAS3_1-scalingFactor.bw",features = "~/SeqPlots_data/files/ctcf_enr.bed",refgenome = "dm3",xmin = 1000, xmax = 1000,type = "mf")
plot(a)
library(seqplots)
?getPlotSetArray
BSgenome::installed.genomes()
run()
run()
run()
a<-getPlotSetArray(tracks = in_c,
features = "../../Insulator_classes_and_datasets/final_MACS2_insulator_classes/bed/MCIFS.bed",
refgenome = "dm3", xmin = 3000, xmax = 3000, type = "mf")
in_c <- c("CPR6-4_CTCF_q30_x180_norm_seq_depth.bw",
"tmp.bw")
a<-getPlotSetArray(tracks = in_c,
features = "../../Insulator_classes_and_datasets/final_MACS2_insulator_classes/bed/MCIFS.bed",
refgenome = "dm3", xmin = 3000, xmax = 3000, type = "mf")
SF_c <- c("~/SeqPlots_data/files/RAS3_1-scalingFactor.bw",
"~/SeqPlots_data/files/RAS3_2-scalingFactor.bw",
"~/SeqPlots_data/files/CPR6_1-scalingFactor.bw",
"~/SeqPlots_data/files/CPR6_2-scalingFactor.bw",
"~/SeqPlots_data/files/CTCF1-scalingFactor.bw",
"~/SeqPlots_data/files/CTCF2-scalingFactor.bw")
a<-getPlotSetArray(tracks = SF_c,
features = "../../Insulator_classes_and_datasets/final_MACS2_insulator_classes/bed/MCIFS.bed",
refgenome = "dm3", xmin = 3000, xmax = 3000, type = "mf")
library(seqplots)
a<-getPlotSetArray(tracks = SF_c,
features = "../../Insulator_classes_and_datasets/final_MACS2_insulator_classes/bed/MCIFS.bed",
refgenome = "dm3", xmin = 3000, xmax = 3000, type = "mf")
setwd("~/Dropbox/13_NCCU/courses/DataScienceInPractice_資料科學實務/1061/codes/code04")
pbinom(ceiling((0.045-0.04)* 8426), size= 8426, prob=0.045)
errorProb <- function(targetRate,difference,size) { 	# Note: 1
pbinom(ceiling((targetRate-difference)*size),
size=size,prob=targetRate)
}
print(errorProb(0.045,0.004,est))
estimate <- function(targetRate,difference,errorProb) {
ceiling(-log(errorProb)*targetRate/(difference^2))
}
(est <- estimate(0.045,0.004,0.05))
# measure large performance differences with high confidence
estimate(0.045,0.005,0.04)
# measure small performance differences with even moderate confidence.
estimate(0.045,0.003,0.06)
errorProb <- function(targetRate,difference,size) { 	# Note: 1
pbinom(ceiling((targetRate-difference)*size),
size=size,prob=targetRate)
}
print(errorProb(0.045,0.004,est))
est
binSearchNonPositive <- function(fEventuallyNegative) { 	# Note: 3
low <- 1
high <- low+1
while(fEventuallyNegative(high)>0) {
high <- 2*high
}
while(high>low+1) {
m <- low + (high-low) %/% 2
if(fEventuallyNegative(m)>0) {
low <- m
} else {
high <- m
}
}
high
}
actualSize <- function(targetRate,difference,errorProb) {
binSearchNonPositive(function(n) {
errorProb(targetRate,difference,n) - errorProb })
}
size <- actualSize(0.045,0.004,0.05) 	# Note: 4
print(size)
## [1] 7623
print(errorProb(0.045,0.004,size))
# Load data
data(iris)
head(iris, 3)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
# print method
print(ir.pca)
# summary method
summary(ir.pca)
# visualize PCA
library(devtools)
install_github("ggbiplot", "vqv")
#Biplot for Principal Components using ggplot2
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species)
